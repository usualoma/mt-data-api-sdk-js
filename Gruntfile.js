module.exports = function( grunt ) {

    "use strict";

    var srcHintOptionsBrowser = grunt.file.readJSON("src/.jshintrc"),
        srcHintOptionsNode    = grunt.file.readJSON("src/.jshintrc"),
        connectServerPort     = 9001,
        proxySnippet          = require("grunt-connect-proxy/lib/utils").proxyRequest,
        MTServerStatusHelper  = "spec/helpers/psgi-server-status.js",
        MTServerPort          = 9002,
        MTServer;
    srcHintOptionsBrowser.browser = true;
    srcHintOptionsNode.node = true;

    grunt.initConfig({
        pkg: grunt.file.readJSON("package.json"),
        clean: {
            "data-api": [
                "<%= preprocess['data-api-node'].dest %>",
                "<%= preprocess['node-bootstrap'].dest %>",
                "<%= preprocess['data-api-browser'].dest %>",
                "<%= Object.keys(uglify['data-api-browser'].files)[0] %>",
                "<%= uglify['data-api-browser'].options.sourceMap %>",
                MTServerStatusHelper
            ]
        },
        preprocess: {
            "data-api-browser": {
                dest: "mt-static/data-api/v1/js/mt-data-api.js",
                src: "src/data-api/v1/mt-data-api.js"
            },
            "data-api-node": {
                dest: "node-lib/data-api/v1/node-mt-data-api.js",
                src: "src/data-api/v1/node-mt-data-api.js"
            },
            "node-bootstrap": {
                dest: "node-lib/bootstrap.js",
                src: "src/node/bootstrap.js"
            }
        },
        watch: {
            "data-api": {
                files: [ "src/**/*.js" ],
                tasks: "dev"
            }
        },
        uglify: {
            "data-api-browser": {
                files: {
                    "mt-static/data-api/v1/js/mt-data-api.min.js": [ "mt-static/data-api/v1/js/mt-data-api.js" ]
                },
                options: {
                    banner: "/* Copyright (c) 2013 Six Apart, Ltd.\n * This file is generated by Movable Type DataAPI SDK for JavaScript.\n * Consult the source files for their respective licenses and copyrights.\n * <%= pkg.homepage %>\n */\n",
                    sourceMap: "mt-static/data-api/v1/js/mt-data-api.min.map",
                    sourceMapPrefix: 4,
                    sourceMappingURL: "mt-data-api.min.map",
                    report: "min",
                    beautify: {
                        ascii_only: true
                    },
                    compress: {
                        if_return: false,
                        hoist_funs: false,
                        join_vars: false,
                        loops: false,
                        unused: false
                    },
                    mangle: {
                        // saves some bytes when gzipped
                        except: ["undefined"]
                    }
                }
            }
        },
        jshint: {
            "data-api-browser": {
                src: [
                    "src/data-api/common/core.js",
                    "src/data-api/common/cookie.js",
                    "src/data-api/common/endpoints.js",
                    "src/data-api/common/exports.js",
                    "src/data-api/common/sessionstore-cookie.js",
                    "src/data-api/common/sessionstore-cookie-encrypted.js"
                ],
                options: srcHintOptionsBrowser
            },
            "data-api-node": {
                src: [
                    "src/data-api/common/core.js",
                    "src/data-api/common/cookie.js",
                    "src/data-api/common/endpoints.js",
                    "src/data-api/common/exports.js",
                    "src/data-api/common/window.js",
                    "src/data-api/common/sessionstore-cookie.js",
                    "src/data-api/common/sessionstore-cookie-encrypted.js",
                    "src/data-api/common/sessionstore-fs.js",
                    "src/node/bootstrap.js"
                ],
                options: srcHintOptionsNode
            },
            grunt: {
                src: ["Gruntfile.js"],
                options: {
                    jshintrc: ".jshintrc"
                }
            }
        },
        connect: {
          jasmine: {
            options: {
              hostname: "localhost",
              port: connectServerPort,
              middleware: function (connect, options) {
                return [
                  proxySnippet,
                  connect.static(options.base),
                  connect.directory(options.base)
                ];
              }
            },
            proxies: [
                {
                    context: "/cgi-bin",
                    host: "localhost",
                    port: MTServerPort,
                    https: false,
                    changeOrigin: false
                }
            ]
          },
        },
        jasmine: {
            "data-api-browser": {
                src: ["mt-static/data-api/v1/js/mt-data-api.js"],
                options: {
                    specs: "spec/data-api/**/*.js",
                    host: "http://localhost:" + connectServerPort + "/",
                    helpers: ["spec/vendor/**/*.js", "spec/helpers/*.js"],
//                    outfile: "_SpecRunner.html",
//                    keepRunner: true,
//                    template: require("grunt-template-jasmine-requirejs"),
//                    templateOptions: {
//                        requireConfig: {
//                            baseUrl: "app/",
//                            paths: requireConfig.paths,
//                            shim: requireConfig.shim,
//                            deps: requireConfig.deps,
//                            locale: requireConfig.locale,
//                            hbs: requireConfig.hbs
//                        }
//                    }
                }
            },
        }
    });

    grunt.registerTask("update-data-api-endpoints", function() {
        var done  = this.async(),
            ver   = process.env.MT_DATA_API_VERSION,
            path  = require("path"),
            fs    = require("fs"),
            exec  = require("child_process").exec,
            base  = path.dirname(fs.realpathSync(__filename)),
            dest  = path.join(base, "src", "data-api", "v" + ver, "endpoints.json"),
            bin   = path.join(base, "bin/data-api-endpoints"),
            cmd   = [
                bin,
                process.env.MT_DATA_API_BASE_URL,
                ver
            ].join(" ");

        exec(cmd, function(err, stdout, stderr) {
            if (err) {
                console.error(stderr);
                return done(false);
            }

            fs.writeFileSync(dest, stdout, "utf8");

            done();
        });
    });

    grunt.registerTask("update-sjcl-js", function() {
        var done      = this.async(),
            fs        = require("fs"),
            path      = require("path"),
            exec      = require("child_process").exec,
            base      = path.dirname(fs.realpathSync(__filename)),
            src       = path.join(base, "deps", "sjcl", "core.js"),
            dest      = path.join(base, "src", "data-api", "common", "sjcl.js"),
            configure = [
                path.join(base, "deps", "sjcl", "configure"),
                "--with-aes",
                "--with-codecString",
                "--with-sha256",
                "--with-random",
                "--with-bitArray",
                "--with-convenience",
                "--with-ccm",
                "--with-pbkdf2",
                "--with-hmac",
                "--with-codecBase64",
                "--without-ocb2",
                "--without-codecHex"
            ].join(" "),
            make      = [
                "make",
                "-C",
                path.join(base, "deps", "sjcl")
            ].join(" ");

        exec(configure, function(err, stdout, stderr) {
            if (err) {
                console.error(stderr);
                return done(false);
            }

            console.log(stdout);

            exec(make, function(err, stdout, stderr) {
                if (err) {
                    console.error(stderr);
                    return done(false);
                }

                console.log(stdout);

                fs.writeFileSync(dest, fs.readFileSync(src), "utf8");

                done();
            });
        });
    });

    grunt.registerTask("start-movable-type-server", function() {
        var done    = this.async(),
            fs      = require("fs"),
            path    = require("path"),
            spawn   = require("child_process").spawn,
            base    = path.dirname(fs.realpathSync(__filename)),
            mtHome  = process.env.MT_HOME,
            options = [
              path.join(mtHome, "t", "mysql-test-psgi-server.pl"),
              "--port",
              MTServerPort,
              "--plugin-path",
              path.join(base, "spec", "plugins"),
            ];

        function writeHelper(status) {
            var stmt = [
                "var isMovableTypeServerRunning = " + (status ? "true" : "false"),
                "    dataApiBaseUrl = 'http://localhost:" + connectServerPort + "/cgi-bin/mt-data-api.cgi';",
            ].join("\n");
            fs.writeFileSync(MTServerStatusHelper, stmt, "utf8");
        }

        if (! mtHome) {
            writeHelper(false);
            return done();
        }
        writeHelper(true);

        MTServer = spawn("perl", options);

        MTServer.stderr.on("data", function(data) {
            if (/Setting gid to/.test(data)) {
                done();
            }
        });
    });

    function stopMovableTypeServer() {
        if (MTServer) {
            MTServer.kill("SIGTERM");
            MTServer = null;
        }
    }

    grunt.registerTask("stop-movable-type-server", stopMovableTypeServer);
    grunt.event.on("jasmine.testDone", function(total, passed, failed) {
        if (failed) {
            stopMovableTypeServer();
        }
    });

    grunt.loadNpmTasks("grunt-contrib-jshint");
    grunt.loadNpmTasks("grunt-contrib-clean");
    grunt.loadNpmTasks("grunt-contrib-watch");
    grunt.loadNpmTasks("grunt-contrib-uglify");
    grunt.loadNpmTasks("grunt-contrib-jasmine");
    grunt.loadNpmTasks("grunt-contrib-connect");
    grunt.loadNpmTasks("grunt-connect-proxy");
    grunt.loadNpmTasks("grunt-preprocess");

    grunt.registerTask("default", "build");
    grunt.registerTask("build", ["preprocess", "jshint", "uglify"]);
    grunt.registerTask("dev", ["preprocess", "jshint"]);

    grunt.registerTask("test", [
        "configureProxies:jasmine",
        "connect:jasmine",
        "start-movable-type-server",
        "jasmine:data-api-browser",
        "stop-movable-type-server",
    ]);

    grunt.registerTask("ci", [
        "connect:jasmine",
        "jasmine:data-api-browser",
    ]);
};
